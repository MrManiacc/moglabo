<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:cc="http://xmlns.jcp.org/jsf/composite"
	  xmlns:h="http://xmlns.jcp.org/jsf/html">
	<h:head>
		<meta charset="UTF-8" />
		<title>Input Name</title>
	</h:head>

	<h:body>
		<cc:interface>
			<!--
			Nameableインターフェースをtype属性に指定することで，value属性に渡された
			オブジェクトがNameableのメソッドを定義していることを保証できる。
			そのためcc:implementation内部ではNameableのメソッドが提供するプロパティにアクセスできる。
			要するにページ表示時ではあるもののtype属性で型チェックに近いことができる。
			type属性に指定する値はクラス名でも動作する。しかしコンポーネントを利用する
			クライアントが渡すBeanにできるだけ自由度を持たせたいならばインターフェースにする
			べきである。例えばEmployeeOfMonthクラスを指定しても動作はするが，このコンポーネントの
			value属性にはEmployeeOfMonthのオブジェクトしか渡せなくなる。
			-->
			<cc:attribute name="value" required="true" 
						  type="practicejsf.bean.type.Nameable" />
			<cc:attribute name="firstNamePrompt" required="false" 
						  default="苗字" />
			<cc:attribute name="lastNamePrompt" required="false" 
						  default="名前" />
			<cc:attribute name="required" required="false" 
						  default="true" />
			<cc:attribute name="requiredMessage" required="false" 
						  default="必須入力要素です" />
		</cc:interface>

		<cc:implementation>
			<h:outputStylesheet library="style" name="common.css" />

			<!--
			h:panelGridはtable要素を出力する。個々の要素はtd要素の中に含まれるので
			spanやpを書くと出力結果が崩れてしまう。h:panelGridはレイアウト目的で使ってはいけない。
			-->
			<h:panelGrid columns="3">
				#{cc.attrs.firstNamePrompt}:
				<h:inputText value="#{cc.attrs.value.firstName}" 
							 id="firstName"
							 required="#{cc.attrs.required}"
							 requiredMessage="#{cc.attrs.requiredMessage}" />
				<h:message for="firstName" class="error" />
				#{cc.attrs.lastNamePrompt}:
				<h:inputText value="#{cc.attrs.value.lastName}" 
							 id="lastName"
							 required="#{cc.attrs.required}"
							 requiredMessage="#{cc.attrs.requiredMessage}" />
				<h:message for="lastName" class="error" />
			</h:panelGrid>
		</cc:implementation>
	</h:body>
</html>