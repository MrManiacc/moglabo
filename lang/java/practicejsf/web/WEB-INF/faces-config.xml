<?xml version='1.0' encoding='UTF-8'?>
<faces-config version="2.2"
			  xmlns="http://xmlns.jcp.org/xml/ns/javaee"
			  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd">
	<navigation-rule>
		<from-view-id>/navigation.xhtml</from-view-id>
		<navigation-case>
			<from-action>#{navigationController.processPage1}</from-action>
			<from-outcome>page</from-outcome>
			<to-view-id>/page1.xhtml</to-view-id>
		</navigation-case>
		<navigation-case>
			<from-action>#{navigationController.processPage2}</from-action>
			<from-outcome>page</from-outcome>
			<to-view-id>/page2.xhtml</to-view-id>
		</navigation-case>
		<navigation-case>
			<from-action>#{navigationController.goHome}</from-action>
			<from-outcome>page</from-outcome>
			<!-- 
			index.htmlと指定してもindex.xhtmlやindex.jspに遷移されてしまう。 
			拡張子を指定しない場合xhtmlから検索され次にjspが検索される。htmlは
			検索されない。
			-->
			<to-view-id>/index</to-view-id>
			<if>#{navigationController.toHome}</if>
		</navigation-case>
	</navigation-rule>
	<navigation-rule>
		<from-view-id>*</from-view-id>
		<navigation-case>
			<from-outcome>too-short</from-outcome>
			<to-view-id>/coreservlet/navigation/error-message.xhtml</to-view-id>
		</navigation-case>
	</navigation-rule>
	<navigation-rule>
		<!--
		to-view-idに指定した値はスラッシュから始まっていなくても絶対パスとして扱われる。
		-->
		<navigation-case>
			<from-outcome>page1</from-outcome>
			<to-view-id>/coreservlet/navigation/result-page-1.xhtml</to-view-id>
		</navigation-case>
		<navigation-case>
			<from-outcome>page2</from-outcome>
			<to-view-id>/coreservlet/navigation/result-page-2.xhtml</to-view-id>
		</navigation-case>
		<navigation-case>
			<from-outcome>page3</from-outcome>
			<to-view-id>/coreservlet/navigation/result-page-3.xhtml</to-view-id>
		</navigation-case>
	</navigation-rule>
	<navigation-rule>
		<!--
		アスタリスクを含むfrom-view-idよりも「よりマッチする」from-view-idを持つ
		navigation-ruleの方が優先して適用される。
		-->
		<from-view-id>/coreservlet/navigation/start-page-with-explicit-bean.xhtml</from-view-id>
		<navigation-case>
			<!-- ifでELを使いメソッドを呼び出すこともできる。 -->
			<from-outcome>empty</from-outcome>
			<if>#{messageHandler.message.isEmpty()}</if>
			<!-- managed-beanの定義より前の行でもmanaged-bean-nameの値を使ってBeanにアクセスできる。 -->
			<to-view-id>/coreservlet/navigation/#{messageHandler.emptyPage}</to-view-id>
		</navigation-case>
		<navigation-case>
			<from-outcome>too-short</from-outcome>
			<to-view-id>/coreservlet/navigation/error-message-explicit-bean.xhtml</to-view-id>
		</navigation-case>
		<!--
		全てのfrom-outcomeを省略すると最初に定義されたnavigation-caseのto-view-idが
		常に適用される。
		-->
		<navigation-case>
			<from-outcome>page1</from-outcome>
			<to-view-id>/coreservlet/navigation/message-page-1.xhtml</to-view-id>
		</navigation-case>
		<navigation-case>
			<from-outcome>page2</from-outcome>
			<to-view-id>/coreservlet/navigation/message-page-2.xhtml</to-view-id>
		</navigation-case>
		<navigation-case>
			<from-outcome>page3</from-outcome>
			<to-view-id>/coreservlet/navigation/message-page-3.xhtml</to-view-id>
		</navigation-case>
	</navigation-rule>
	<!--
	明示的なBeanを設定することでFaceletsページを変更せずに利用するBeanを差し替えることができる。
	ManagedBeanアノテーションのnameを変更することでも対応可能だが，その場合はBeanを含む
	アプリケーションのビルドと再デプロイが必要になる。また同じ名前のBeanを異なるスコープで
	使い分けることもできる。
	-->
	<managed-bean>
		<managed-bean-name>messageHandler</managed-bean-name>
		<managed-bean-class>practicejsf.bean.EmptySupportController</managed-bean-class>
	
		<!--
		managed-bean-scopeによるスコープの設定を怠るとBeanを参照するページが表示できない。 
		デフォルトでリクエストスコープにされたりはしない。 
		-->
		<managed-bean-scope>request</managed-bean-scope></managed-bean>
	<application>
		<!-- アプリケーション開始時のイベントリスナ設定 -->
		<system-event-listener>
			<system-event-listener-class>
				practicejsf.event.ApplicationCustomEventListener
			</system-event-listener-class>
			<system-event-class>
				javax.faces.event.PostConstructApplicationEvent
			</system-event-class>
		</system-event-listener>
		<!-- アプリケーション終了時のイベントリスナ設定 -->
		<system-event-listener>
			<system-event-listener-class>
				practicejsf.event.ApplicationCustomEventListener
			</system-event-listener-class>
			<system-event-class>
				javax.faces.event.PreDestroyApplicationEvent
			</system-event-class>
		</system-event-listener>
		<!--
		<supported-locale>に設定したロケールはApplication.getSupportedLocalesを
		呼び出した時にLocaleオブジェクトになって返される。
		-->
		<locale-config>
			<default-locale>en_US</default-locale>
			<supported-locale>en_US</supported-locale>
			<supported-locale>de_DE</supported-locale>
			<supported-locale>ja_JP</supported-locale>
		</locale-config>
		<!--
		resources/practice/bundle/component.properties を参照する場合，
		<base-name>は practicejsf.bundle.component となる。
		-->
		<resource-bundle>
			<base-name>practicejsf.bundle.component</base-name>
			<var>bundleComponent</var>
		</resource-bundle>
		<!--
		messages1.propertiesをWEB-INF/classesの直下に配置にするなら 
		base-nameはmessages1のみでよい。
		-->
		<resource-bundle>
			<base-name>practicejsf.messages.messages1</base-name>
			<var>msgs1</var>
		</resource-bundle>
		<resource-bundle>
			<base-name>practicejsf.winner.winners</base-name>
			<var>winMessages</var>
		</resource-bundle>
		<resource-bundle>
			<base-name>practicejsf.messages.messages2</base-name>
			<var>msgs2</var>
		</resource-bundle>
		<resource-bundle>
			<base-name>practicejsf.validation.messages</base-name>
			<var>vmsgs</var>
		</resource-bundle>
	</application>
</faces-config>
