<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:h="http://xmlns.jcp.org/jsf/html"
	  xmlns:f="http://xmlns.jcp.org/jsf/core"
	  xmlns:mycomponent="http://xmlns.jcp.org/jsf/component">
    <h:head>
		<meta charset="UTF-8" />
        <title>カスタムコンポーネント</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<h:outputStylesheet library="style" name="common.css" />
		<style>
			.converter {
				margin-left: 1rem;
				margin-right: 1rem;
			}
			
			.codepoint span {
				color: crimson;
				font-weight: bold;
				margin-right: 1rem;
			}
		</style>
    </h:head>
    <h:body>
		<header>
			<h1>カスタムコンポーネント</h1>
			<p><h:link outcome="/index" value="home" /></p>
		</header>

		<main>
			<section>
				<h2>文字列をコードポイントに変換するカスタムコンポーネント</h2>
				<p>ページ読み込み時刻=<span id="now-time" class="emphasis"></span></p>
				<p class="note">
					変換はAjaxリクエストで行うのでページ全体は読み込み直されない。
				</p>

				<h:form>
					<fieldset>
						<legend>文字列→コードポイント変換</legend>
						<h:messages styleClass="error" />
						変換対象文字列(最大10文字)
						<h:inputText value="#{requestScope.string}" 
									 validatorMessage="最大10文字まで入力可能です">
							<f:validateLength maximum="10" />
						</h:inputText>

						<span class="converter">
							<!-- フォームの入力内容を用いてフォーム部分だけを再描画する。 -->
							<h:commandButton type="submit" value="変換">
								<f:ajax execute="@form" render="@form" />
							</h:commandButton>
						</span>

						コードポイント
						<span class="codepoint">
							<mycomponent:codePoint id="result-codepoint" value="#{requestScope.string}" />
						</span>
					</fieldset>
				</h:form>
			</section>

			<aside>
				<h2>参考サイト</h2>
				<ul>
					<li><a href="http://jdevelopment.nl/simple-java-based-jsf-22-custom-component/">
							Simple Java based JSF 2.2 custom component
						</a></li>
				</ul>
			</aside>

			<script>
				(((w, d) => {
					const appendNowTime = () => {
						const timeEle = d.getElementById("now-time");
						const time = new Date().toLocaleFormat();
						const timeText = d.createTextNode(time);
						timeEle.appendChild(timeText);
					};

					appendNowTime();
				})(window, document));
			</script>
		</main>
    </h:body>
</html>
