問1 下記のテスト駆動開発に関する記述が正しいかどうかそれぞれ○か×かを答えてください。

(1) テスト駆動開発は設計技法である
答:×

(2) テスト駆動開発を完璧にしていれば、納品前のテストなどは不要である
答:×

(3) テスト駆動開発と振舞駆動開発は同じである
答:×

(4) テスト駆動開発の目的は「きれいな動く、コード」である
答:○

(5) テスト駆動開発は、プログラマの不安を解消する効果が大きい
答:○

(6) テスト駆動開発を実施していれば高セキュリティなソフトウェアができる
答:×

(7) テスト駆動開発のサイクルは Red Green Refactor と称される
答:○

(8) テスト駆動開発をおこなうと、コードを書く総量が減る
答:×

(9) テスト駆動開発での理想的なコードカバレッジは100%である
答:○

(10) テスト駆動開発では、適度なコードの抽象化は難しい
答:×

問2 1～3に当てはまる適切な単語を選択肢から選びなさい。

1. 実際のソフトウェアのコードよりも、先にテストコードを書くこと。
答:テストファースト

2. 定数などの仮実装を返すこと。付加価値としてテストコードのテストをする方法。
答:Fake It（仮実装）

3. 2つ以上のテストによって、仮実装ではなく、正しい実装を導くこと。
答:Triangulate（三角測量）

[選択肢]
- Fake It（仮実装）
- Triangulate（三角測量）
- アサートファースト
- テストファースト
- フィクスチャー
- モック


問3 A～Cに当てはまる適切な単語を選択肢から選びなさい。

テストコードが多くなると、[  A  ]が原因で効率が悪くなることがある。

また、[  B  ]テストコードは、ソフトウェアのメンテナンス性を著しく低下させる。

時にはデータベースの[  C  ]も必要となり、慎重かつ周到に実施する必要がある。

- 精神的な不安
- 網羅性のない
- スローテスト
- 壊れやすい
- チューニング
- リファクタリング
- レガシーコード
- レプリケーション

答:
A:レガシーコード
B:網羅性のない
C:チューニング
